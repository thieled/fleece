% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unnest_recursively.R
\name{unnest_recursively}
\alias{unnest_recursively}
\title{Recursively unnest a nested data frame until every column is unnested}
\usage{
unnest_recursively(df)
}
\arguments{
\item{df}{A nested data frame (data.table or data.frame) containing list columns.}
}
\value{
A data frame with all nested list columns unnested and merged with other columns.
The resulting data frame will have a tidy format.
}
\description{
This function takes a nested data frame and recursively applies the "unnest_wider"
function from the tidyr package to unnest list columns until all columns are
in a tidy format. The function separates list columns from non-list columns,
checks if there is anything to unnest, and then applies the unnesting process
recursively to deeply nested list columns.
}
\examples{
# Sample nested list, with elements of unequal lengths
l <- list(list(id = 1,
               message = "abc",
               author = list(name = "A",
                             date = as.Date("2020-01-01")),
               flag = list()
),
list(id = 2,
     message = "abcdef",
     author = list(name = "B",
                   date = as.Date("2022-01-01")),
     flag = list()
),
list(id = 3,
     message = "abcdefg",
     author = list(name = "C",
                   date = as.Date("2023-01-01")),
     flag = list("spam", "deleted")
)
)

# Use do.call("rbind") to transform into data.frame
df <- do.call("rbind", l) |> as.data.frame()

# Unnest recursively:
unnested_df <- unnest_recursively(df)

}
